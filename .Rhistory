library(plotly)
library(PASWR2)
library(lattice)
library(descr)
library(openxlsx)
library(kableExtra)
library(pastecs)
paris_weekdays <- read.csv("C:/Users/Mateo Silva/Desktop/paris_weekdays.csv")
datos <- paris_weekdays
dt<- slice_sample(datos,n=500)
ggplot(datos,aes(x=realSum,y=dist,fill=factor(dist)))+geom_col()
library(tidyverse)
library(dplyr)
library(xts)
library(psych)
library(gmodels)
library(MASS)
library(fitdistrplus)
library(lmtest)
library(fdth)
library(readxl)
library(ggplot2)
library(plotly)
library(PASWR2)
library(lattice)
library(descr)
library(openxlsx)
library(kableExtra)
library(pastecs)
paris_weekdays <- read.csv("C:/Users/Mateo Silva/Desktop/paris_weekdays.csv")
datos <- paris_weekdays
dt<- slice_sample(datos,n=100)
ggplot(datos,aes(x=realSum,y=dist,fill=factor(dist)))+geom_col()
library(readxl)
datos <- read_excel("C:/Users/Mateo Silva/Desktop/Rsito/datos.xlsx")
View(datos)
library(readxl)
library(tidyverse)
library(tidyverse)
library(ggplot2)
library(plotly)
library(plotly)
library(pastecs)
library(pastecs)
library (fdth)
library (fdth)
library(PASWR2)
library(PASWR2)
library(descr)
library(lmtest)
datos <- read_excel("C:/Users/Mateo Silva/Desktop/Rsito/datos.xlsx")
library(lmtest)
datos <- read_excel("C:/Users/Mateo Silva/Desktop/Rsito/datos.xlsx")
View(datos)
# colocar labels a una variable categorica: importante Respetar el orden
Genero <- factor(datos$GENERO, labels= c ("femenino", "masculino"))
barchart(Genero)
attach(datos)
boxplot_edad = ggplot(datos, aes(x='', y=EDAD)) +
geom_boxplot(color='grey10', width=0.5) +
labs(x='', y='Edad', title='Gr?fico de cajas para la edad') +
theme_minimal()
ggplotly(boxplot_edad)
summary(datos)
descriptivas <- stat.desc(EDAD)
descriptivas
options(scipen = 999999)
tabla <- table(GENERO)
pie(tabla, main="G?nero de los clientes")
tabla.1 <- freq(GENERO)
tabla.1
edad2 <- cut(EDAD, c(seq(from = 19, to = 65, by = 10),65), include.lowest=TRUE)
tabla.2 <- freq(ordered(edad2), plot = TRUE)
tabla.3 <- crosstab(GENERO, edad2, prop.c = TRUE, plot=FALSE)
tabla.3
tabla.4 <- crosstab(GENERO, edad2, prop.r = TRUE, plot=F)
tabla.4
eda(EDAD)
t.test(EDAD, mu=40)
t.test(EDAD, mu=40, alternative = "less")
t.test(EDAD, mu=40, alternative = "greater")
var.test(EDAD~GENERO)
t.test(EDAD~GENERO, var.equal=TRUE)
t.test(x = datos$`PESO ANTES`, y = datos$`PESO DESPU?S`, alternative = "two.sided",
mu = 0, paired = TRUE, conf.level = 0.95)
t.test(x = datos$`PESO ANTES`, y = datos$`PESO DESPU?S`, alternative = "two.sided",
mu = 0, paired = TRUE, conf.level = 0.95)
t.test(x = datos$`PESO ANTES`, y = datos$`PESO DESPUES`, alternative = "two.sided",
mu = 0, paired = TRUE, conf.level = 0.95)
t.test(x = datos$`PESO ANTES`, y = datos$`PESO DESPUÉS`, alternative = "two.sided",
mu = 0, paired = TRUE, conf.level = 0.95)
knitr::opts_chunk$set(echo = TRUE)
setwd('C:/Users/Jardi/Downloads/santy/inferencia/Statistical-analysis-Airbnb-Paris')
setwd('C:/Users/Jardi/Downloads/santy/inferencia/Statistical-analysis-Airbnb-Paris')
setwd('C:/Users/Mateo Silva/Desktop/rparisino/Statistical-analysis-Airbnb-Paris')
Paris_weekdays <- read_csv("paris_weekdays.csv")
```{r,message = FALSE, warning = FALSE}
library(e1071)
library(tidyverse)
library(dplyr)
library(xts)
library(psych)
library(gmodels)
library(MASS)
library(fitdistrplus)
library(lmtest)
library(fdth)
library(readxl)
library(ggplot2)
library(plotly)
library(PASWR2)
library(lattice)
library(descr)
library(openxlsx)
library(kableExtra)
library(pastecs)
library(moments)
# Importar todas las librerias necesarias para el analisis
library(e1071)
library(tidyverse)
library(dplyr)
library(xts)
library(psych)
library(gmodels)
library(MASS)
library(fitdistrplus)
library(lmtest)
library(fdth)
library(readxl)
library(ggplot2)
library(plotly)
library(PASWR2)
library(lattice)
library(descr)
library(openxlsx)
library(kableExtra)
library(pastecs)
library(moments)
# Importar todas las librerias necesarias para el analisis
library(e1071)
library(readr)
library(tidyverse)
library(dplyr)
library(xts)
library(psych)
library(gmodels)
library(MASS)
library(fitdistrplus)
library(lmtest)
library(fdth)
library(readxl)
library(ggplot2)
library(plotly)
library(PASWR2)
library(lattice)
library(descr)
library(openxlsx)
library(kableExtra)
library(pastecs)
library(moments)
setwd('C:/Users/Mateo Silva/Desktop/rparisino/Statistical-analysis-Airbnb-Paris')
Paris_weekdays <- read_csv("paris_weekdays.csv")
datos <- Paris_weekdays
#Variables cuantitativas
CalificacionDeLimpieza <- datos$cleanliness_rating
PrecioFinal <- datos$realSum
CapacidadPersonas <- datos$person_capacity
DistanciaCentro <- datos$dist
#Variables cualitativas
TipoDeCuarto<-  datos$room_type
CuartoPrivado <- datos$room_private
PoseeMasDeUnCuarto <- datos$multi
FinesDeNegocios <- datos$biz
knitr::opts_chunk$set(echo = TRUE)
# Importar todas las librerias necesarias para el analisis
library(e1071)
library(readr)
library(tidyverse)
library(dplyr)
library(xts)
library(psych)
library(gmodels)
library(MASS)
library(fitdistrplus)
library(lmtest)
library(fdth)
library(readxl)
library(ggplot2)
library(plotly)
library(PASWR2)
library(lattice)
library(descr)
library(openxlsx)
library(kableExtra)
library(pastecs)
library(moments)
setwd('C:/Users/Mateo Silva/Desktop/rparisino/Statistical-analysis-Airbnb-Paris')
Paris_weekdays <- read_csv("paris_weekdays.csv")
datos <- Paris_weekdays
#Variables cuantitativas
CalificacionDeLimpieza <- datos$cleanliness_rating
PrecioFinal <- datos$realSum
CapacidadPersonas <- datos$person_capacity
DistanciaCentro <- datos$dist
#Variables cualitativas
TipoDeCuarto<-  datos$room_type
CuartoPrivado <- datos$room_private
PoseeMasDeUnCuarto <- datos$multi
FinesDeNegocios <- datos$biz
boxplot(CalificacionDeLimpieza, horizontal = TRUE)
mean_val <- mean(CalificacionDeLimpieza)
sd_val <- sd(CalificacionDeLimpieza)
primerFiltro <- CalificacionDeLimpieza[CalificacionDeLimpieza < (mean_val + 2.9*sd_val) & CalificacionDeLimpieza > (mean_val - 2.9*sd_val)]
mean_val2 <- mean(primerFiltro)
sd_val2 <- sd(primerFiltro)
segundoFiltro <- primerFiltro[primerFiltro < (mean_val2 + 2.9*sd_val2) & primerFiltro > (mean_val2 - 2.9*sd_val2)]
mean_val3 <- mean(segundoFiltro)
sd_val3 <- sd(segundoFiltro)
CalificacionDeLimpiezaSinAtipicos <- segundoFiltro[segundoFiltro < (mean_val3 + 2.9*sd_val3) & segundoFiltro > (mean_val3 - 2.9*sd_val3)]
boxplot(CalificacionDeLimpiezaSinAtipicos, horizontal = TRUE)
min <- min(CalificacionDeLimpiezaSinAtipicos)
min
max <- max(CalificacionDeLimpiezaSinAtipicos)
max
rango <- max-min
rango
media <- mean(CalificacionDeLimpiezaSinAtipicos)
media
desv_estándar <- sd(CalificacionDeLimpiezaSinAtipicos)
desv_estándar
coef_var <- desv_estándar/media
coef_var
##Cuartil 1
q1 <- unname(quantile(CalificacionDeLimpiezaSinAtipicos, 0.25))
q1
##Cuartil 3
q3 <- unname(quantile(CalificacionDeLimpiezaSinAtipicos, 0.75))
q3
ric <- q3 - q1
ric
#Cerco inferior
cerco_inf <- q1 - 1.5*ric
cerco_inf
#Cerco superior
cerco_sup <- q3 + 1.5*ric
cerco_sup
skewness(CalificacionDeLimpiezaSinAtipicos)
cuortosis <- kurtosis(CalificacionDeLimpiezaSinAtipicos)
cuortosis
boxplot(PrecioFinal, horizontal = TRUE)
mean_val <- mean(PrecioFinal)
sd_val <- sd(PrecioFinal)
PrecioFinalSinAtipicos <- PrecioFinal[PrecioFinal < (mean_val + 2.1*sd_val) & PrecioFinal > (mean_val - 2.1*sd_val)]
mean_val2 <- mean(PrecioFinalSinAtipicos)
sd_val2 <- sd(PrecioFinalSinAtipicos)
PrecioFinalSinAtipicos2 <- PrecioFinalSinAtipicos[PrecioFinalSinAtipicos < (mean_val2 + 2.1*sd_val2) & PrecioFinalSinAtipicos > (mean_val2 - 2.1*sd_val2)]
mean_val3 <- mean(PrecioFinalSinAtipicos2)
sd_val3 <- sd(PrecioFinalSinAtipicos2)
PrecioFinalSinAtipicos3 <- PrecioFinalSinAtipicos2[PrecioFinalSinAtipicos2 < (mean_val3 + 2.1*sd_val3) & PrecioFinalSinAtipicos2 > (mean_val3 - 2.1*sd_val3)]
mean_val4 <- mean(PrecioFinalSinAtipicos3)
sd_val4 <- sd(PrecioFinalSinAtipicos3)
PrecioFinalSinAtipicos4 <- PrecioFinalSinAtipicos3[PrecioFinalSinAtipicos3 < (mean_val4 + 2.1*sd_val4) & PrecioFinalSinAtipicos3 > (mean_val4 - 2.1*sd_val4)]
boxplot(PrecioFinalSinAtipicos4, horizontal = TRUE)
min <- min(PrecioFinalSinAtipicos4)
min
max <- max(PrecioFinalSinAtipicos4)
max
rango <- max-min
rango
media <- mean(PrecioFinalSinAtipicos4)
media
desv_estándar <- sd(PrecioFinalSinAtipicos4)
desv_estándar
coef_var <- desv_estándar/media
coef_var
##Cuartil 1
q1 <- unname(quantile(PrecioFinalSinAtipicos4, 0.25))
q1
##Cuartil 3
q3 <- unname(quantile(PrecioFinalSinAtipicos4, 0.75))
q3
ric <- q3 - q1
ric
#Cerco inferior
cerco_inf <- q1 - 1.5*ric
cerco_inf
#Cerco superior
cerco_sup <- q3 + 1.5*ric
cerco_sup
curtosis <- kurtosis(PrecioFinalSinAtipicos4)
curtosis
min <- min(CapacidadPersonas)
min
max <- max(CapacidadPersonas)
max
rango <- max-min
rango
media <- mean(CapacidadPersonas)
media
desv_estándar <- sd(CapacidadPersonas)
desv_estándar
coef_var <- desv_estándar/media
coef_var
##Cuartil 1
q1 <- unname(quantile(CapacidadPersonas, 0.25))
q1
##Cuartil 3
q3 <- unname(quantile(CapacidadPersonas, 0.75))
q3
ric <- q3 - q1
ric
#Cerco inferior
cerco_inf <- q1 - 1.5*ric
cerco_inf
#Cerco superior
cerco_sup <- q3 + 1.5*ric
cerco_sup
boxplot(CapacidadPersonas, horizontal = TRUE)
DistanciaCentro <- datos$dist
boxplot(DistanciaCentro, horizontal = TRUE)
mean_val <- mean(DistanciaCentro)
sd_val <- sd(DistanciaCentro)
primerFiltro <- DistanciaCentro[DistanciaCentro < (mean_val + 3*sd_val) & DistanciaCentro > (mean_val - 3*sd_val)]
mean_val1 <- mean(primerFiltro)
sd_val1 <- sd(primerFiltro)
DistanciaCentroSinAtipicos <- primerFiltro[primerFiltro < (mean_val1 + 3*sd_val1) & primerFiltro > (mean_val1 - 3*sd_val1)]
boxplot(DistanciaCentroSinAtipicos, horizontal = TRUE)
mean_val <- mean(DistanciaCentroSinAtipicos)
mean_val
sd_val <- sd(DistanciaCentroSinAtipicos)
sd_val
min <- min(DistanciaCentroSinAtipicos)
min
max <- max(DistanciaCentroSinAtipicos)
max
rango <- max-min
rango
mean_val <- mean(DistanciaCentroSinAtipicos)
mean_val
sd_val <- sd(DistanciaCentroSinAtipicos)
sd_val
coef_var <- desv_estándar/media
coef_var
##Cuartil 1
q1 <- unname(quantile(DistanciaCentroSinAtipicos, 0.25))
q1
##Cuartil 3
q3 <- unname(quantile(DistanciaCentroSinAtipicos, 0.75))
q3
ric <- q3 - q1
ric
#Cerco inferior
cerco_inf <- q1 - 1.5*ric
cerco_inf
#Cerco superior
cerco_sup <- q3 + 1.5*ric
cerco_sup
tablaDeFrecuencia <- table(TipoDeCuarto)
print(tablaDeFrecuencia)
tablaDeFrecuenciaRelativa <- prop.table(tablaDeFrecuencia)
print(tablaDeFrecuenciaRelativa)
moda <- names(tablaDeFrecuencia)[which.max(tablaDeFrecuencia)]
print(moda)
tablaDeFrecuencia <- table(CuartoPrivado)
print(tablaDeFrecuencia)
tablaDeFrecuenciaRelativa <- prop.table(tablaDeFrecuencia)
print(tablaDeFrecuenciaRelativa)
moda <- names(tablaDeFrecuencia)[which.max(tablaDeFrecuencia)]
print(moda)
tablaDeFrecuencia <- table(PoseeMasDeUnCuarto)
print(tablaDeFrecuencia)
tablaDeFrecuenciaRelativa <- prop.table(tablaDeFrecuencia)
print(tablaDeFrecuenciaRelativa)
moda <- names(tablaDeFrecuencia)[which.max(tablaDeFrecuencia)]
print(moda)
tabla <- table(PoseeMasDeUnCuarto)
pie(tabla, main="Posee mas de un cuarto", labels = c("posee un cuarto", "Posee mas de un cuarto"))
FinesDeNegocios <- factor(datos$biz, labels = c ("No", "Si"))
barchart(FinesDeNegocios)
frecuencia_FinNegocios <- table(FinesDeNegocios)
print(frecuencia_FinNegocios)
frecuenciaRelativa_FinNegocios <- prop.table(frecuencia_FinNegocios)
print(frecuenciaRelativa_FinNegocios)
moda <- names(frecuencia_FinNegocios)[which.max(frecuencia_FinNegocios)]
print(moda)
boxplot(CapacidadPersonas, horizontal = TRUE)
boxplot(DistanciaCentro, horizontal = TRUE)
barplot(table(TipoDeCuarto))
barplot(table(CuartoPrivado), names.arg = c("Sin cuarto privado", "Con cuarto privado"))
barplot(table(PoseeMasDeUnCuarto), names.arg = c("Sin mas de un cuarto", "Con mas de un cuarto"))
barplot(table(FinesDeNegocios), names.arg = c("Sin fines de negocios", "Con fines de negocios"))
mediaMuestral <- mean(CalificacionDeLimpieza)
mediaMuestral
desviacionestándarMuestral <- sd(CalificacionDeLimpieza)
desviacionestándarMuestral
rango_inferior <- mediaMuestral+qt(0.01, df=length(CalificacionDeLimpieza)-1)*(desviacionestándarMuestral/sqrt(length(CalificacionDeLimpieza)))
rango_inferior
rango_Superior <- mediaMuestral-qt(0.01, df=length(CalificacionDeLimpieza)-1)*(desviacionestándarMuestral/sqrt(length(CalificacionDeLimpieza)))
rango_Superior
mediaMuestral <- mean(PrecioFinal)
mediaMuestral
desviacionestándarMuestral <- sd(PrecioFinal)
desviacionestándarMuestral
rango_inferior <- mediaMuestral+qt(0.025, df=length(PrecioFinal))*(desviacionestándarMuestral/sqrt(length(PrecioFinal)))
rango_inferior
rango_Superior <- mediaMuestral-qt(0.025, df=length(PrecioFinal))*(desviacionestándarMuestral/sqrt(length(PrecioFinal)))
rango_Superior
mediaMuestral <- mean(CapacidadPersonas)
mediaMuestral
desviacionestándarMuestral <- sd(CapacidadPersonas)
desviacionestándarMuestral
rango_inferior <- mediaMuestral+qt(0.025, df=length(CapacidadPersonas))*(desviacionestándarMuestral/sqrt(length(CapacidadPersonas)))
rango_inferior
rango_Superior <- mediaMuestral-qt(0.025, df=length(CapacidadPersonas))*(desviacionestándarMuestral/sqrt(length(CapacidadPersonas)))
rango_Superior
mediaMuestral <- mean(DistanciaCentro)
mediaMuestral
desviacionestándarMuestral <- sd(DistanciaCentro)
desviacionestándarMuestral
rango_inferior <- mediaMuestral+qt(0.01, df=length(DistanciaCentro))*(desviacionestándarMuestral/sqrt(length(DistanciaCentro)))
rango_inferior
rango_Superior <- mediaMuestral-qt(0.01, df=length(DistanciaCentro))*(desviacionestándarMuestral/sqrt(length(DistanciaCentro)))
rango_Superior
# Calcular la proporción de cada categoría en los datos
proporciones <- table(TipoDeCuarto) / length(TipoDeCuarto)
# Calcular el error estándar de cada proporción
error_estándar <- sqrt(proporciones * (1 - proporciones) / length(TipoDeCuarto))
# Calcular el intervalo de confianza del 95% para cada proporción
intervalos_confianza_inferiores <- proporciones + qt(0.025, length(TipoDeCuarto)) * error_estándar
intervalos_confianza_superiores <- proporciones - qt(0.025, length(TipoDeCuarto)) * error_estándar
# Imprimir el resultado
cat("Los intervalos de confianza del 95% son:")
for (i in 1:length(proporciones)) {
cat("\n - Categoría '", names(proporciones)[i], "': [", intervalos_confianza_inferiores[i], ", ", intervalos_confianza_superiores[i], "]", sep="")
}
datos_true <- subset(CuartoPrivado, CuartoPrivado == TRUE)
privateRoomTrue <- sum(CuartoPrivado)
privateRoomTrue
p <- privateRoomTrue/length(CuartoPrivado)
p
rango_inferior <-p + qt(0.025, length(CuartoPrivado))* sqrt((p*(1-p))/length(CuartoPrivado))
rango_inferior
rango_superior <-  p - qt(0.025, length(PoseeMasDeUnCuarto))* sqrt((p*(1-p))/length(CuartoPrivado))
rango_superior
datos_true <- subset(PoseeMasDeUnCuarto, PoseeMasDeUnCuarto == 1)
multi <- sum(datos_true)
multi
p <- multi/length(PoseeMasDeUnCuarto)
p
rango_inferior <- p + qt(0.025, length(PoseeMasDeUnCuarto))* sqrt((p*(1-p))/length(PoseeMasDeUnCuarto))
rango_inferior
rango_superior <- p - qt(0.025, length(PoseeMasDeUnCuarto))* sqrt((p*(1-p))/length(PoseeMasDeUnCuarto))
rango_superior
# <- subset(FinesDeNegocios, FinesDeNegocios == 1)
#multi <- sum(datos_true)
#multi
p <- multi/length(FinesDeNegocios)
p
rango_inferior <- p + qt(0.025, length(FinesDeNegocios))* sqrt((p*(1-p))/length(FinesDeNegocios))
rango_inferior
rango_superior <- p - qt(0.025, length(FinesDeNegocios))* sqrt((p*(1-p))/length(FinesDeNegocios))
rango_superior
with(datos, (t.test(CalificacionDeLimpieza, alternative = "less", mu = 9.5, conf.level = 0.95)))
with(datos, (t.test(realSum, alternative = "greater", mu = 400, conf.level = 0.95)))
with(datos, (t.test(realSum, alternative = "greater", mu = 400, conf.level = 0.95)))
with(datos, (t.test(dist, alternative = "greater", mu = 2.1, conf.level = 0.95)))
daticos<- prop.test( sum(TipoDeCuarto== "Entire home/apt"), n = length(datos$room_type), p = 0.7, alternative = "less")
daticos
daticos<- prop.test(sum(datos$room_private[datos$room_private== "TRUE"] ), n = length(datos$room_private), p = 0.35, alternative = "two.sided")
daticos
daticos<- prop.test(sum(datos$multi[datos$multi== "1"] ), n = length(datos$multi), p = 0.30, alternative = "less", conf.level = 0.95)
daticos
daticos<- prop.test(sum(datos$biz[datos$biz== "1"] ), n = length(datos$biz), p = 0.26, alternative = "greater", conf.level = 0.92)
daticos
df <- data.frame(x = PrecioFinal, y = CalificacionDeLimpieza)
ggplot(data = data.frame(PrecioFinal, CalificacionDeLimpieza), aes(x = PrecioFinal, y = CalificacionDeLimpieza)) +
geom_point() + xlim(0, 3000) + ylim(0, 10) +
geom_smooth(method = "lm", formula = y ~ poly(x, 1, raw = TRUE) ) +
labs(x = "Precio Final", y = "Calificación de limpieza")
df <- data.frame(x = PrecioFinal, y = DistanciaCentro)
ggplot(data = data.frame(PrecioFinal, CalificacionDeLimpieza), aes(x = PrecioFinal, y = DistanciaCentro)) +
geom_point() + xlim(0, 5000) + ylim(0, 10) +
geom_smooth(method = "lm", formula = y ~ poly(x, 2, raw = TRUE) ) +
labs(x = "Precio final", y = "Distancia al centro")
df <- data.frame(x = PrecioFinal, y = CapacidadPersonas)
ggplot(data = data.frame(PrecioFinal, CapacidadPersonas), aes(x = PrecioFinal, y = CapacidadPersonas)) +
geom_point() + xlim(0, 1700) + ylim(0, 7) +
geom_smooth(method = "lm", formula = y ~ poly(x, 2, raw = TRUE) ) +
labs(x = "Precio final", y = "Capacidad personas")
datos <-data.frame(TipoDeCuarto, FinesDeNegocios)
tabla <- table(datos)
barplot(tabla, beside = FALSE,
main = "Gráfica de barras apliladas",
xlab = "Fines de negocios", ylab = "Frecuencia",
names.arg = c("Sin fines de negocios", "Con fines de negocios"),
legend.text = rownames(tabla),
args.legend = list(title = "Tipo de cuarto"))
tabla <- crosstab(TipoDeCuarto,FinesDeNegocios,prop.c = TRUE,plot = FALSE)
tabla
datos <-data.frame(CuartoPrivado, PoseeMasDeUnCuarto)
tabla <- table(datos)
barplot(tabla, beside = FALSE,
main = "Gráfica de barras apliladas",
xlab = "Posee mas de un cuarto", ylab = "Frecuencia",
names.arg = c("No posee mas de un cuarto", "posee mas de un cuarto"),
legend.text = rownames(tabla),
args.legend = list(title = "Cuarto privado"))
tabla <- crosstab(CuartoPrivado,PoseeMasDeUnCuarto,prop.c = TRUE,plot = FALSE)
tabla
setwd('C:/Users/Mateo Silva/Desktop/rparisino/Statistical-analysis-Airbnb-Paris')
Paris_weekdays <- read_csv("paris_weekdays.csv")
datos <- Paris_weekdays
